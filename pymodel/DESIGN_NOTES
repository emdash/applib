Overview

PyModel is a a flexible, reusable MVC framework for providing all of the
features you expect in a modern application, including file formats and undo /
redo support, for applications written in python.  Unlike other MVC
frameworks, PyModel focuses entirely on the application model and does not
assume or require a particular UI toolkit or framework. What good is an MVC
framework if it ties you to one way of presenting and interacting with your
data. PyModel provides a suite of tools and components so you can quickly and
easily construct a resuable application core. If you're in a hurry to get to a
working applicaiton, there is a companion framework, PyVC, which greatly
simplifies the construction of direct-manipulation interfaces but relies on
pygtk and pygoocanvas. PyModel provides the following facilities:

- a signal interface inspired by but not coupled with gobject
- a library of convenience metaclasses, descriptors and decorators which simplify the definition of
  model objects
- undo / redo support
- extensible object save and load support, with zero-code required for native
  pickle-, XML-, and YAML-based formats, and a flexible system for adding
  import/export filters.

Signal Interface

The core of the framework is the signal module. Observable is a generic
interface, inheriting from object, which can be mixed into any class to
provide signal support. Convenience decorators emit_before, and emit_after are
provided.

    Signal(object):

    Observable(object):
        """Signal mixin interface"""
        - __signals__
        + connect()
        + disconnect()
        + disconnectByFunction()
        + emit()
        + @classmethod addSignal()

    SignalNotPresentError(Exception):
        pass

    @emit_before()
    @emit_after()

    Observer(object):
        pass

Convenience Library

    The convenience library builds on the low-level functionality provided by
    the Signal module to provide a comprehensive application framework. It
    eleminates tedious boilerplate code by providing some generic reusable
    classes, alloing you to design your application objects at a very high
    level as hierarchies of properties. The base model also integrates support
    for undo and redo, as well as file format support.

    BaseModel(object):
        """All model objects inherit from this class"""
        + serialize()
        + deseriealize()

    property(object):
        - changed_signal
        - value_type
        - value
        - undoable
        + __set__()
        + __get__()
        + __del__()

    ObservableList(list):
        """A list which emits signals when it is mutated"""

    ListProperty(list):
        """An observer which watches an ObservableList, automatically keeping
        its contents in sync. Optionally an intance of a PropertyChangeTracker
        can be automatically connected to child of the list"""

    ObservableMapping(dict):
        """Similar to an observable list but based on a dict() instead

    MappingProperty(dict):
        """Similar to a ListObserver, but syncrhonizes and wathhes both keys and values of the
        mapping."""

Undo Stack

    UndoRedoStack(object):

    UndoAction(object):
        + do()
        + undo()

    PropertyChangeAction(UndoAction):
        + do()
        + undo()

    ChildAddedAction(UndoAction):
        + do()
        + undo()

    ChildRemovedAction(UndoAction):
        + do()
        + undo()

    HighLevelAction(UndoAction):
        + do()
        + undo()
        + start()
        + finalize()

Settings Manager

File Format Stack

    Context(object):
        pass

    Parser(object):
        + load()

    Formatter(object):
        + dump()

    Filter(object):
        + convert()


Example Usage

Let's create a simple application using this framework. Let's say we want to
design a simple accounting system that supports a simple XML file format,
along with undo and redo. In the accounting system there are Accounts
and Transactions. Accounts are essentially list of Transactions, and compute
their balance by summing over transactions. Furthermore, accounts can contain
nested sub-Accounts. Changes to the balance of a sub-Account ripple up to the
parent account. For the sake of simplicity, debits always subtract from the
account balance and credits always add to it. We'll consider an Account to be a
subclass of Transaction, and we'll have a single "root Account" for the entire
application.


